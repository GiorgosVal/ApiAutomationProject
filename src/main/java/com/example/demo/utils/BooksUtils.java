package com.example.demo.utils;

import com.example.demo.dtos.BookDTO;
import lombok.SneakyThrows;
import lombok.experimental.UtilityClass;
import org.apache.commons.lang3.tuple.ImmutablePair;

/**
 * Utilities that help with the assertions of the {@link BookDTO}
 */
@UtilityClass
public class BooksUtils {

    /**
     * Sets the {@link BookDTO#id} and {@link BookDTO#pageCount} to {@code 0} if they are {@code null}.
     *
     * @param bookDTO The DTO to transform its aforementioned properties
     * @return The same DTO with transformed properties
     */
    public static BookDTO getExcpectedBookDTO(BookDTO bookDTO) {
        if (bookDTO.id == null) {
            bookDTO.id = 0;
        }

        if (bookDTO.pageCount == null) {
            bookDTO.pageCount = 0;
        }
        return bookDTO;
    }

    /**
     * Returns a key/value pair, where the key is expected to be found inside the errors map of the
     * {@link com.example.demo.dtos.ErrorResponseDTO}, and the value is the corresponding error message that
     * is expected to be found inside the list.
     * <br>
     * The pair is generated by examining which property inside the {@link BookDTO} has not a valid instance type
     * <br><br>
     * <b>throws</b> {@link Exception} if the method fails to identify properties with invalid type
     *
     * @param bookDTO The DTO to examine its properties and generate the expected error
     * @return The expected key of the error and the error message that will exist inside the
     * {@link com.example.demo.dtos.ErrorResponseDTO}
     */
    @SneakyThrows
    public static ImmutablePair<String, String> getExpectedErrorMessage(BookDTO bookDTO) {
        if (bookDTO == null) {
            return new ImmutablePair<>("", "A non-empty request body is required.");
        }
        if (!(bookDTO.id instanceof Integer)) {

            return new ImmutablePair<>("$.id", "The JSON value could not be converted to System.Int32. Path: $.id");

        }
        if (!(bookDTO.pageCount instanceof Integer)) {

            return new ImmutablePair<>("$.pageCount", "The JSON value could not be converted to System.Int32. Path: $.pageCount");

        }

        if (!(bookDTO.title instanceof String)) {
            return new ImmutablePair<>("$.title", "The JSON value could not be converted to System.String. Path: $.title");
        }

        if (!(bookDTO.description instanceof String)) {
            return new ImmutablePair<>("$.description", "The JSON value could not be converted to System.String. Path: $.description");
        }

        if (!(bookDTO.excerpt instanceof String)) {
            return new ImmutablePair<>("$.excerpt", "The JSON value could not be converted to System.String. Path: $.excerpt");
        }

        if (!(bookDTO.publishDate instanceof String) || ((String) bookDTO.publishDate).isBlank() || !DateTimeUtils.isValidDateFormat((String) bookDTO.publishDate)) {
            return new ImmutablePair<>("$.publishDate", "The JSON value could not be converted to System.DateTime. Path: $.publishDate");
        }

        throw new Exception("Not implemented");
    }
}
